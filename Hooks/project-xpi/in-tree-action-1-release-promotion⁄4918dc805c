{
  "hookGroupId": "project-xpi",
  "hookId": "in-tree-action-1-release-promotion/4918dc805c",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://hg.mozilla.org/ci/ci-admin).\n\nAction task release-promotion at level 1, with `.taskcluster.yml` hash 4918dc805c.\n\nFor project(s) aki-xpi-manifest\n\nThis hook is fired in response to actions defined in a Gecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-xpi/in-tree-action-1-release-promotion/4918dc805c",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "$let": {
      "tasks_for": "action",
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}",
        "symbol": "${payload.decision.action.symbol}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:release-promotion",
        "cb_name": "release-promotion"
      },
      "push": {
        "$eval": "payload.decision.push"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      }
    },
    "in": {
      "$let": {
        "taskgraph": {
          "branch": "taskgraph",
          "revision": "d302e95cc988706ba746bfecbf1dae31090d212f"
        },
        "trustDomain": "xpi"
      },
      "in": {
        "$if": "tasks_for in [\"github-pull-request\", \"github-push\", \"action\", \"cron\"]",
        "then": {
          "$let": {
            "ownerEmail": {
              "$if": "tasks_for == \"github-push\"",
              "then": "${event.pusher.email}",
              "else": {
                "$if": "tasks_for == \"github-pull-request\"",
                "then": "${event.pull_request.user.login}@users.noreply.github.com",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${tasks_for}@noreply.mozilla.org"
                }
              }
            },
            "baseRepoUrl": {
              "$if": "tasks_for == \"github-push\"",
              "then": "${event.repository.html_url}",
              "else": {
                "$if": "tasks_for == \"github-pull-request\"",
                "then": "${event.pull_request.base.repo.html_url}",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${repository.url}"
                }
              }
            },
            "repoUrl": {
              "$if": "tasks_for == \"github-push\"",
              "then": "${event.repository.html_url}",
              "else": {
                "$if": "tasks_for == \"github-pull-request\"",
                "then": "${event.pull_request.head.repo.html_url}",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${repository.url}"
                }
              }
            },
            "project": {
              "$if": "tasks_for == \"github-push\"",
              "then": "${event.repository.name}",
              "else": {
                "$if": "tasks_for == \"github-pull-request\"",
                "then": "${event.pull_request.head.repo.name}",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${repository.project}"
                }
              }
            },
            "head_branch": {
              "$if": "tasks_for == \"github-pull-request\"",
              "then": "${event.pull_request.head.ref}",
              "else": {
                "$if": "tasks_for == \"github-push\"",
                "then": "${event.ref}",
                "else": {
                  "$if": "tasks_for == \"cron\"",
                  "then": "${push.branch}",
                  "else": {
                    "$if": "tasks_for == \"action\"",
                    "then": "refs/heads/master"
                  }
                }
              }
            },
            "head_sha": {
              "$if": "tasks_for == \"github-push\"",
              "then": "${event.after}",
              "else": {
                "$if": "tasks_for == \"github-pull-request\"",
                "then": "${event.pull_request.head.sha}",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${push.revision}"
                }
              }
            },
            "ownTaskId": {
              "$if": "\"github\" in tasks_for",
              "then": {
                "$eval": "as_slugid(\"decision_task\")"
              },
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${ownTaskId}"
              }
            }
          },
          "in": {
            "$let": {
              "level": {
                "$if": "tasks_for in [\"github-push\", \"cron\", \"action\"] \u0026\u0026 repoUrl == \"https://github.com/mozilla-extensions/xpi-manifest\"",
                "then": "3",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "then": "${repository.level}",
                  "else": 1
                }
              }
            },
            "in": {
              "taskId": {
                "$if": "tasks_for != \"action\"",
                "then": "${ownTaskId}"
              },
              "taskGroupId": {
                "$if": "tasks_for == \"action\"",
                "then": "${action.taskGroupId}",
                "else": "${ownTaskId}"
              },
              "schedulerId": "${trustDomain}-level-${level}",
              "created": {
                "$fromNow": ""
              },
              "deadline": {
                "$fromNow": "1 day"
              },
              "expires": {
                "$fromNow": "1 year 1 second"
              },
              "metadata": {
                "$merge": [
                  {
                    "owner": "${ownerEmail}",
                    "source": "${repoUrl}/raw/${head_sha}/.taskcluster.yml"
                  },
                  {
                    "$if": "tasks_for in [\"github-push\", \"github-pull-request\"]",
                    "then": {
                      "name": "Decision Task",
                      "description": "The task that creates all of the other tasks in the task graph"
                    },
                    "else": {
                      "$if": "tasks_for == \"action\"",
                      "then": {
                        "name": "Action: ${action.title}",
                        "description": "${action.description}"
                      },
                      "else": {
                        "name": "Decision Task for cron job ${cron.job_name}",
                        "description": "Created by a [cron task](https://tools.taskcluster.net/tasks/${cron.task_id})"
                      }
                    }
                  }
                ]
              },
              "provisionerId": "xpi-${level}",
              "workerType": "decision",
              "tags": {
                "$if": "tasks_for in [\"github-push\", \"github-pull-request\"]",
                "then": {
                  "kind": "decision-task"
                },
                "else": {
                  "$if": "tasks_for == \"action\"",
                  "then": {
                    "kind": "action-callback"
                  },
                  "else": {
                    "$if": "tasks_for == \"cron\"",
                    "then": {
                      "kind": "cron-task"
                    }
                  }
                }
              },
              "routes": {
                "$flatten": [
                  "checks",
                  {
                    "$if": "tasks_for == \"github-push\"",
                    "then": [
                      "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                    ],
                    "else": []
                  }
                ]
              },
              "scopes": {
                "$if": "tasks_for == \"github-push\"",
                "then": {
                  "$let": {
                    "short_head_branch": {
                      "$if": "head_branch[:10] == \"refs/tags/\"",
                      "then": {
                        "$eval": "head_branch[10:]"
                      },
                      "else": {
                        "$if": "head_branch[:11] == \"refs/heads/\"",
                        "then": {
                          "$eval": "head_branch[11:]"
                        },
                        "else": "${head_branch}"
                      }
                    }
                  },
                  "in": [
                    "assume:repo:${repoUrl[8:]}:branch:${short_head_branch}"
                  ]
                },
                "else": {
                  "$if": "tasks_for == \"github-pull-request\"",
                  "then": [
                    "assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request"
                  ],
                  "else": {
                    "$if": "tasks_for == \"action\"",
                    "then": [
                      "${action.repo_scope}"
                    ],
                    "else": [
                      "assume:repo:${repoUrl[8:]}:cron:${cron.job_name}"
                    ]
                  }
                }
              },
              "requires": "all-completed",
              "priority": "lowest",
              "retries": 5,
              "payload": {
                "env": {
                  "$merge": [
                    {
                      "XPI_BASE_REPOSITORY": "${baseRepoUrl}",
                      "XPI_HEAD_REPOSITORY": "${repoUrl}",
                      "XPI_HEAD_REF": "${head_branch}",
                      "XPI_HEAD_REV": "${head_sha}",
                      "XPI_REPOSITORY_TYPE": "git",
                      "TASKGRAPH_BASE_REPOSITORY": "https://hg.mozilla.org/ci/taskgraph",
                      "TASKGRAPH_HEAD_REPOSITORY": "https://hg.mozilla.org/ci/${taskgraph.branch}",
                      "TASKGRAPH_HEAD_REV": "${taskgraph.revision}",
                      "TASKGRAPH_REPOSITORY_TYPE": "hg",
                      "REPOSITORIES": {
                        "$json": {
                          "xpi": "XPI Manifest",
                          "taskgraph": "Taskgraph"
                        }
                      },
                      "HG_STORE_PATH": "/builds/worker/checkouts/hg-store"
                    },
                    {
                      "$if": "tasks_for in [\"github-pull-request\"]",
                      "then": {
                        "XPI_PULL_REQUEST_NUMBER": "${event.pull_request.number}"
                      }
                    },
                    {
                      "$if": "tasks_for == \"action\"",
                      "then": {
                        "ACTION_TASK_GROUP_ID": "${action.taskGroupId}",
                        "ACTION_TASK_ID": {
                          "$json": {
                            "$eval": "taskId"
                          }
                        },
                        "ACTION_INPUT": {
                          "$json": {
                            "$eval": "input"
                          }
                        },
                        "ACTION_CALLBACK": "${action.cb_name}"
                      }
                    }
                  ]
                },
                "features": {
                  "taskclusterProxy": true,
                  "chainOfTrust": true
                },
                "image": "mozillareleases/taskgraph:decision-bd477b55732fc5f5d55a78e6162355af8bc81805b415a9ea8dbe42c020f840db",
                "maxRunTime": 1800,
                "command": [
                  "/usr/local/bin/run-task",
                  "--xpi-checkout=/builds/worker/checkouts/src",
                  "--taskgraph-checkout=/builds/worker/checkouts/taskgraph",
                  "--task-cwd=/builds/worker/checkouts/src",
                  "--",
                  "bash",
                  "-cx",
                  {
                    "$let": {
                      "extraArgs": {
                        "$if": "tasks_for == \"cron\"",
                        "then": "${cron.quoted_args}",
                        "else": ""
                      }
                    },
                    "in": {
                      "$if": "tasks_for == \"action\"",
                      "then": "PIP_IGNORE_INSTALLED=0 pip install --user /builds/worker/checkouts/taskgraph \u0026\u0026 cd /builds/worker/checkouts/src \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 ~/.local/bin/taskgraph action-callback\n",
                      "else": "PIP_IGNORE_INSTALLED=0 pip install --user /builds/worker/checkouts/taskgraph \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 ~/.local/bin/taskgraph decision --pushlog-id='0' --pushdate='0' --project='${project}' --message=\"\" --owner='${ownerEmail}' --level='${level}' --base-repository=\"$XPI_BASE_REPOSITORY\" --head-repository=\"$XPI_HEAD_REPOSITORY\" --head-ref=\"$XPI_HEAD_REF\" --head-rev=\"$XPI_HEAD_REV\" --repository-type=\"$XPI_REPOSITORY_TYPE\" --tasks-for='${tasks_for}' ${extraArgs}\n"
                    }
                  }
                ],
                "artifacts": {
                  "public": {
                    "type": "directory",
                    "path": "/builds/worker/artifacts",
                    "expires": {
                      "$fromNow": "1 year"
                    }
                  }
                }
              },
              "extra": {
                "$merge": [
                  {
                    "$if": "tasks_for == \"action\"",
                    "then": {
                      "parent": "${action.taskGroupId}",
                      "action": {
                        "name": "${action.name}",
                        "context": {
                          "taskGroupId": "${action.taskGroupId}",
                          "taskId": {
                            "$eval": "taskId"
                          },
                          "input": {
                            "$eval": "input"
                          }
                        }
                      }
                    }
                  },
                  {
                    "$if": "tasks_for == \"cron\"",
                    "then": {
                      "cron": {
                        "$json": {
                          "$eval": "cron"
                        }
                      }
                    }
                  },
                  {
                    "tasks_for": "${tasks_for}"
                  }
                ]
              }
            }
          }
        }
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "additionalProperties": false,
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "decision": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "action": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "description": "action name",
                "type": "string"
              },
              "title": {
                "description": "action title",
                "type": "string"
              },
              "description": {
                "description": "action description",
                "type": "string"
              },
              "taskGroupId": {
                "description": "taskGroupId of the decision task",
                "type": "string"
              },
              "cb_name": {
                "description": "name of the in-tree callback function",
                "type": "string"
              },
              "symbol": {
                "description": "treeherder symbol",
                "type": "string"
              }
            },
            "description": "Information about the action to perform"
          },
          "push": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "description": "user who made the original push",
                "type": "string"
              },
              "revision": {
                "description": "revision of the original push",
                "type": "string"
              },
              "pushlog_id": {
                "description": "Mercurial pushlog ID of the original push",
                "type": "string"
              }
            },
            "description": "Information about the push that created the decision task"
          },
          "repository": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "description": "repository URL (without trailing slash)",
                "type": "string",
                "pattern": "[^/]$"
              },
              "project": {
                "description": "repository project name (also known as \"alias\")",
                "type": "string"
              },
              "level": {
                "description": "repository SCM level",
                "type": "string"
              }
            },
            "description": "Information about the repository where the push occurred"
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`."
      },
      "user": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "description": "taskId of the task on which this action was activated",
                "type": "string"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "description": "taskGroupId on which this task was activated",
            "type": "string"
          }
        },
        "description": "Information provided by the user or user interface"
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the `hookPayload`\n        template in the `actions.json` file generated in-tree."
  }
}
