{
  "hookGroupId": "project-nss",
  "hookId": "in-tree-action-1-generic/adb76d3805",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://github.com/mozilla-releng/fxci-config).\n\nAction task generic at level 1, with `.taskcluster.yml` hash adb76d3805.\n\nFor (project, branch) combinations:\nnss-try, branch: 'default'\n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-nss/in-tree-action-1-generic/adb76d3805",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "in": {
        "tags": {
          "createdForUser": "${ownerEmail}"
        },
        "extra": {
          "treeherder": {
            "build": {
              "platform": "nss-decision"
            },
            "symbol": "D",
            "machine": {
              "platform": "nss-decision"
            }
          }
        },
        "routes": [
          "tc-treeherder-stage.v2.${repository.project}.${push.revision}.${push.pushlog_id}",
          "tc-treeherder.v2.${repository.project}.${push.revision}.${push.pushlog_id}"
        ],
        "scopes": [
          "assume:repo:${repoUrl[8:]}:branch:default"
        ],
        "taskId": "${ownTaskId}",
        "created": {
          "$fromNow": ""
        },
        "expires": {
          "$fromNow": "14 days"
        },
        "payload": {
          "env": {
            "TC_OWNER": "${ownerEmail}",
            "TC_SOURCE": "${repository.url}",
            "TC_PROJECT": "${repository.project}",
            "MOZ_SCM_LEVEL": "${repository.level}",
            "NSS_PUSHLOG_ID": "${push.pushlog_id}",
            "TC_SCHEDULER_ID": "${schedulerId}",
            "NSS_HEAD_REVISION": "${push.revision}",
            "NSS_HEAD_REPOSITORY": "${repository.url}"
          },
          "image": "djmitche/nss-decision:0.0.3",
          "command": [
            "bash",
            "-cx",
            "bin/checkout.sh \u0026\u0026 nss/automation/taskcluster/scripts/extend_task_graph.sh\n"
          ],
          "features": {
            "taskclusterProxy": true
          },
          "artifacts": {
            "public/docker-contexts": {
              "path": "/home/worker/docker-contexts",
              "type": "directory",
              "expires": {
                "$fromNow": "7 day"
              }
            }
          },
          "maxRunTime": 1800
        },
        "deadline": {
          "$fromNow": "1 day"
        },
        "metadata": {
          "name": "NSS Decision Task",
          "owner": "mozilla-taskcluster-maintenance@mozilla.com",
          "source": "${repository.url}",
          "description": "The task that creates all of the other tasks in the task graph\n"
        },
        "workerType": "linux-gcp",
        "schedulerId": "${schedulerId}",
        "taskGroupId": "${ownTaskId}",
        "provisionerId": "nss-${repository.level}"
      },
      "$let": {
        "repoUrl": {
          "$if": "repository.url[-1] == \"/\"",
          "else": {
            "$eval": "repository.url"
          },
          "then": {
            "$eval": "repository.url[:-1]"
          }
        },
        "ownerEmail": {
          "$if": "\"@\" in push.owner",
          "else": "${push.owner}@noreply.mozilla.org",
          "then": "${push.owner}"
        },
        "schedulerId": "nss-level-${repository.level}"
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:generic",
        "action_perm": "generic",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              },
              "base_branch": {
                "type": "string",
                "description": "branch this pull request is based on, if applicable"
              },
              "base_revision": {
                "type": "string",
                "description": "revision before the push occurred"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              },
              "base_url": {
                "type": "string",
                "description": "repository URL to use when checking scopes for this action"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the\n            `hookPayload` template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
