{
  "hookGroupId": "project-ci",
  "hookId": "in-tree-pr-action-1-generic/5cdac3e103",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://github.com/mozilla-releng/fxci-config).\n\nPR action task generic at level 1, with `.taskcluster.yml` hash 5cdac3e103.\n\nFor (project, branch) combinations:\n\n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-ci/in-tree-pr-action-1-generic/5cdac3e103",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "in": {
        "in": {
          "in": {
            "$if": "(taskclusterInstance == \"firefoxci\"\n \u0026\u0026 (tasks_for in [\"action\", \"pr-action\", \"cron\"]\n     || (tasks_for == \"github-release\" \u0026\u0026 releaseAction == \"published\")\n     || (tasks_for == \"github-push\" \u0026\u0026 short_head_ref == \"main\")\n     || (isPullRequest \u0026\u0026 pullRequestAction in [\"opened\", \"reopened\", \"synchronize\"])))\n|| (taskclusterInstance == \"staging\"\n    \u0026\u0026 (isPullRequest \u0026\u0026 issueCommentAction in [\"created\", \"edited\"]))\n",
            "then": {
              "tags": {
                "$switch": {
                  "tasks_for == \"cron\"": {
                    "kind": "cron-task"
                  },
                  "tasks_for == \"github-push\" || isPullRequest": {
                    "kind": "decision-task",
                    "createdForUser": "${ownerEmail}"
                  },
                  "tasks_for == \"action\" || tasks_for == \"pr-action\"": {
                    "kind": "action-callback",
                    "createdForUser": "${ownerEmail}"
                  }
                }
              },
              "extra": {
                "$merge": [
                  {
                    "$if": "tasks_for == \"action\"",
                    "then": {
                      "action": {
                        "name": "${action.name}",
                        "context": {
                          "input": {
                            "$eval": "input"
                          },
                          "taskId": {
                            "$eval": "taskId"
                          },
                          "taskGroupId": "${action.taskGroupId}"
                        }
                      },
                      "parent": "${action.taskGroupId}"
                    }
                  },
                  {
                    "$if": "tasks_for == \"cron\"",
                    "then": {
                      "cron": {
                        "$json": {
                          "$eval": "cron"
                        }
                      }
                    }
                  },
                  {
                    "tasks_for": "${tasks_for}"
                  }
                ]
              },
              "routes": {
                "$flatten": [
                  "checks",
                  {
                    "$switch": {
                      "$default": [],
                      "tasks_for == \"cron\"": [
                        "index.${trustDomain}.v2.${project}.latest.taskgraph.decision-${cron.job_name}",
                        "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision-${cron.job_name}",
                        "index.${trustDomain}.v2.${project}.revision.${head_sha}.cron.${ownTaskId}"
                      ],
                      "tasks_for == \"action\"": [
                        "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.actions.${ownTaskId}"
                      ],
                      "tasks_for == \"github-push\"": [
                        "index.${trustDomain}.v2.${project}.latest.taskgraph.decision",
                        "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                      ]
                    }
                  }
                ]
              },
              "scopes": {
                "$switch": {
                  "$default": [
                    "assume:repo:${repoUrl[8:]}:cron:${cron.job_name}"
                  ],
                  "tasks_for == \"action\"": [
                    "assume:repo:${repoUrl[8:]}:action:${action.action_perm}"
                  ],
                  "tasks_for == \"pr-action\"": [
                    "assume:repo:${baseRepoUrl[8:]}:pr-action:${action.action_perm}"
                  ],
                  "tasks_for == \"github-push\"": [
                    "assume:repo:${repoUrl[8:]}:branch:${short_head_ref}"
                  ],
                  "tasks_for == \"github-release\"": [
                    "assume:repo:${repoUrl[8:]}:release:${releaseAction}"
                  ],
                  "tasks_for == \"github-issue-comment\"": [
                    "assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request"
                  ],
                  "tasks_for[:19] == \"github-pull-request\"": [
                    "assume:repo:github.com/${event.pull_request.base.repo.full_name}:${tasks_for[7:]}"
                  ]
                }
              },
              "taskId": {
                "$if": "tasks_for != \"action\"",
                "then": "${ownTaskId}"
              },
              "created": {
                "$fromNow": ""
              },
              "expires": {
                "$fromNow": "1 year 1 second"
              },
              "payload": {
                "env": {
                  "$merge": [
                    {
                      "REPOSITORIES": {
                        "$json": {
                          "fxci": "Firefox-CI Config"
                        }
                      },
                      "FXCI_BASE_REF": "${base_ref}",
                      "FXCI_BASE_REV": "${base_sha}",
                      "FXCI_HEAD_REF": "${head_ref}",
                      "FXCI_HEAD_REV": "${head_sha}",
                      "FXCI_BASE_REPOSITORY": "${repoUrl}",
                      "FXCI_HEAD_REPOSITORY": "${repoUrl}",
                      "FXCI_REPOSITORY_TYPE": "git",
                      "FXCI_PIP_REQUIREMENTS": "taskcluster/requirements.txt"
                    },
                    {
                      "$if": "tasks_for == \"action\"",
                      "then": {
                        "ACTION_INPUT": {
                          "$json": {
                            "$eval": "input"
                          }
                        },
                        "ACTION_TASK_ID": {
                          "$json": {
                            "$eval": "taskId"
                          }
                        },
                        "ACTION_CALLBACK": "${action.cb_name}",
                        "ACTION_TASK_GROUP_ID": "${action.taskGroupId}"
                      }
                    }
                  ]
                },
                "cache": {
                  "${trustDomain}-level-${level}-checkouts-sparse-v1": "/builds/worker/checkouts"
                },
                "image": "mozillareleases/taskgraph:decision-v12.1.0@sha256:756d6edd4c60e1c58132a667273e3cb6113bde3d7a4a3f7b326b375caf53eb81",
                "command": {
                  "$flatten": [
                    "run-task",
                    "--fxci-checkout=/builds/worker/checkouts/src",
                    "--task-cwd=/builds/worker/checkouts/src",
                    "--",
                    "bash",
                    "-cx",
                    {
                      "in": {
                        "$if": "tasks_for == \"action\"",
                        "else": "ln -s /builds/worker/artifacts artifacts \u0026\u0026 taskgraph decision --verbose --pushlog-id='0' --pushdate='0' --project='${project}' --owner='${ownerEmail}' --level='${level}' --repository-type=git --tasks-for='${tasks_for}' --base-repository='${baseRepoUrl}' --base-ref='${base_ref}' --base-rev='${base_sha}' --head-repository='${repoUrl}' --head-ref='${head_ref}' --head-rev='${head_sha}' $${TRY_TASK_CONFIG_FILE+--try-task-config-file=\"$${TRY_TASK_CONFIG_FILE}\"} ${extraArgs}\n",
                        "then": "cd /builds/worker/checkouts/src \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 taskgraph action-callback\n"
                      },
                      "$let": {
                        "extraArgs": {
                          "$if": "tasks_for == \"cron\"",
                          "else": {
                            "$if": "tasks_for == \"github-issue-comment\"",
                            "else": "",
                            "then": "--target-tasks-method=${event.taskcluster_comment}"
                          },
                          "then": "${cron.quoted_args}"
                        }
                      }
                    }
                  ]
                },
                "features": {
                  "chainOfTrust": true,
                  "taskclusterProxy": true
                },
                "artifacts": {
                  "public": {
                    "path": "/builds/worker/artifacts",
                    "type": "directory",
                    "expires": {
                      "$fromNow": "1 year"
                    }
                  },
                  "public/docker-contexts": {
                    "path": "/builds/worker/checkouts/src/docker-contexts",
                    "type": "directory",
                    "expires": {
                      "$fromNow": "7 day"
                    }
                  }
                },
                "maxRunTime": 1800
              },
              "retries": 5,
              "deadline": {
                "$fromNow": "1 day"
              },
              "metadata": {
                "$merge": [
                  {
                    "owner": "${ownerEmail}",
                    "source": "${repoUrl}/raw/${head_sha}/.taskcluster.yml"
                  },
                  {
                    "$switch": {
                      "$default": {
                        "name": "Decision Task for cron job ${cron.job_name}",
                        "description": "Created by a [cron task](https://firefox-ci-tc.services.mozilla.com/tasks/${cron.task_id})"
                      },
                      "tasks_for == \"action\"": {
                        "name": "Action: ${action.title}",
                        "description": "${action.description}\n\nAction triggered by clientID `${clientId}`\n"
                      },
                      "tasks_for == \"pr-action\"": {
                        "name": "PR action: ${action.title}",
                        "description": "${action.description}\n\nPR action triggered by clientID `${clientId}`\n"
                      },
                      "tasks_for in [\"github-push\", \"github-release\"] || isPullRequest": {
                        "name": "Decision Task (${tasks_for[7:]})",
                        "description": "The task that creates all of the other tasks in the task graph"
                      }
                    }
                  }
                ]
              },
              "priority": {
                "$if": "tasks_for == 'cron'",
                "else": {
                  "$if": "tasks_for == \"github-push\" || isPullRequest",
                  "else": "lowest",
                  "then": "very-low"
                },
                "then": "low"
              },
              "requires": "all-completed",
              "workerType": "decision-gcp",
              "schedulerId": "${trustDomain}-level-${level}",
              "taskGroupId": {
                "$if": "tasks_for == \"action\"",
                "else": "${ownTaskId}",
                "then": "${action.taskGroupId}"
              },
              "dependencies": [],
              "provisionerId": "${trustDomain}-${level}"
            }
          },
          "$let": {
            "level": {
              "$if": "tasks_for in [\"github-release\", \"github-push\", \"cron\", \"action\"] \u0026\u0026 repoUrl == \"https://github.com/mozilla-releng/fxci-config\"",
              "else": 1,
              "then": 3
            },
            "short_head_ref": {
              "$switch": {
                "$default": "${head_ref}",
                "head_ref[:10] == \"refs/tags/\"": "${head_ref[10:]}",
                "head_ref[:11] == \"refs/heads/\"": "${head_ref[11:]}"
              }
            }
          }
        },
        "$let": {
          "project": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.repo.name}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${repository.project}",
              "tasks_for in [\"github-push\", \"github-release\"]": "${event.repository.name}"
            }
          },
          "repoUrl": {
            "$switch": {
              "$default": "${event.repository.html_url}",
              "isPullRequest": "${event.pull_request.head.repo.html_url}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${repository.url}"
            }
          },
          "base_ref": {
            "$switch": {
              "isPullRequest": "${event.pull_request.base.ref}",
              "tasks_for == \"pr-action\"": "${push.base_branch}",
              "tasks_for == \"github-release\"": "",
              "tasks_for in [\"cron\", \"action\"]": "${push.branch}",
              "tasks_for == \"github-push\" \u0026\u0026 event.base_ref": "${event.base_ref}",
              "tasks_for == \"github-push\" \u0026\u0026 !(event.base_ref)": "${event.ref}"
            }
          },
          "base_sha": {
            "$switch": {
              "isPullRequest": "${event.pull_request.base.sha}",
              "tasks_for == \"github-push\"": "${event.before}",
              "tasks_for == \"github-release\"": "${event.release.target_commitish}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${push.revision}"
            }
          },
          "head_ref": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.ref}",
              "tasks_for == \"github-push\"": "${event.ref}",
              "tasks_for == \"github-release\"": "${event.release.tag_name}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${push.branch}"
            }
          },
          "head_sha": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.sha}",
              "tasks_for == \"github-push\"": "${event.after}",
              "tasks_for == \"github-release\"": "${event.release.tag_name}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${push.revision}"
            }
          },
          "ownerEmail": {
            "$switch": {
              "isPullRequest": "${event.pull_request.user.login}@users.noreply.github.com",
              "tasks_for == \"github-push\"": "${event.pusher.email}",
              "tasks_for == \"github-release\"": "release+taskgraph-ci@mozilla.com",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${tasks_for}@noreply.mozilla.org"
            }
          },
          "baseRepoUrl": {
            "$switch": {
              "$default": "${event.repository.html_url}",
              "isPullRequest": "${event.pull_request.base.repo.html_url}",
              "tasks_for == \"pr-action\"": "${repository.base_url}",
              "tasks_for in [\"cron\", \"action\"]": "${repository.url}"
            }
          },
          "head_branch": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.ref}",
              "tasks_for == \"github-push\"": "${event.ref}",
              "tasks_for == \"github-release\"": "${event.release.target_commitish}",
              "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${push.branch}"
            }
          }
        }
      },
      "$let": {
        "ownTaskId": {
          "$switch": {
            "\"github\" in tasks_for": {
              "$eval": "as_slugid(\"decision_task\")"
            },
            "tasks_for in [\"cron\", \"action\", \"pr-action\"]": "${ownTaskId}"
          }
        },
        "trustDomain": "ci",
        "isPullRequest": {
          "$eval": "tasks_for[:19] == \"github-pull-request\" || tasks_for == \"github-issue-comment\""
        },
        "releaseAction": {
          "$if": "tasks_for == \"github-release\"",
          "else": "UNDEFINED",
          "then": "${event.action}"
        },
        "pullRequestAction": {
          "$switch": {
            "$default": "UNDEFINED",
            "tasks_for[:19] == \"github-pull-request\"": "${event.action}"
          }
        },
        "issueCommentAction": {
          "$switch": {
            "$default": "UNDEFINED",
            "tasks_for == \"github-issue-comment\"": "${event.action}"
          }
        },
        "taskclusterInstance": {
          "$switch": {
            "taskcluster_root_url == \"https://firefox-ci-tc.services.mozilla.com\"": "firefoxci",
            "taskcluster_root_url == \"https://stage.taskcluster.nonprod.cloudops.mozgcp.net\"": "staging"
          }
        }
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.base_url[8:]}:action:generic",
        "action_perm": "generic",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "pr-action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              },
              "base_branch": {
                "type": "string",
                "description": "branch this pull request is based on, if applicable"
              },
              "base_revision": {
                "type": "string",
                "description": "revision before the push occurred"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              },
              "base_url": {
                "type": "string",
                "description": "repository URL to use when checking scopes for this action"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the\n            `hookPayload` template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
