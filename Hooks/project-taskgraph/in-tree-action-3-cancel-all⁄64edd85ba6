{
  "hookGroupId": "project-taskgraph",
  "hookId": "in-tree-action-3-cancel-all/64edd85ba6",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://hg.mozilla.org/ci/ci-configuration).\n\nAction task cancel-all at level 3, with `.taskcluster.yml` hash 64edd85ba6.\n\nFor project(s) taskgraph\n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-taskgraph/in-tree-action-3-cancel-all/64edd85ba6",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "$if": "tasks_for in [\"hg-push\", \"action\", \"cron\"]",
      "then": {
        "in": {
          "tags": {
            "$if": "tasks_for == \"hg-push\"",
            "else": {
              "$if": "tasks_for == \"action\"",
              "else": {
                "$if": "tasks_for == \"cron\"",
                "then": {
                  "kind": "cron-task"
                }
              },
              "then": {
                "kind": "action-callback",
                "createdForUser": "${ownerEmail}"
              }
            },
            "then": {
              "kind": "decision-task",
              "createdForUser": "${ownerEmail}"
            }
          },
          "extra": {
            "$merge": [
              {
                "treeherder": {
                  "$merge": [
                    {
                      "machine": {
                        "platform": "gecko-decision"
                      }
                    },
                    {
                      "$if": "tasks_for == \"hg-push\"",
                      "else": {
                        "$if": "tasks_for == \"action\"",
                        "else": {
                          "symbol": "${cron.job_symbol}",
                          "groupSymbol": "cron"
                        },
                        "then": {
                          "symbol": "${action.symbol}",
                          "groupName": "action-callback",
                          "groupSymbol": "AC"
                        }
                      },
                      "then": {
                        "symbol": "D"
                      }
                    }
                  ]
                }
              },
              {
                "$if": "tasks_for == \"action\"",
                "then": {
                  "action": {
                    "name": "${action.name}",
                    "context": {
                      "input": {
                        "$eval": "input"
                      },
                      "taskId": {
                        "$eval": "taskId"
                      },
                      "clientId": {
                        "$eval": "clientId"
                      },
                      "taskGroupId": "${action.taskGroupId}"
                    }
                  },
                  "parent": "${action.taskGroupId}"
                }
              },
              {
                "$if": "tasks_for == \"cron\"",
                "then": {
                  "cron": {
                    "$json": {
                      "$eval": "cron"
                    }
                  }
                }
              },
              {
                "tasks_for": "${tasks_for}"
              }
            ]
          },
          "routes": {
            "$flatten": [
              "tc-treeherder.v2.${repository.project}.${push.revision}",
              {
                "$if": "tasks_for == \"hg-push\"",
                "else": {
                  "$if": "tasks_for == \"action\"",
                  "else": [
                    "index.${trustDomain}.v2.${repository.project}.latest.taskgraph.decision-${cron.job_name}",
                    "index.${trustDomain}.v2.${repository.project}.revision.${push.revision}.taskgraph.decision-${cron.job_name}",
                    "index.${trustDomain}.v2.${repository.project}.pushlog-id.${push.pushlog_id}.decision-${cron.job_name}",
                    "index.${trustDomain}.v2.${repository.project}.revision.${push.revision}.cron.${ownTaskId}"
                  ],
                  "then": [
                    "index.${trustDomain}.v2.${repository.project}.revision.${push.revision}.taskgraph.actions.${ownTaskId}",
                    "index.${trustDomain}.v2.${repository.project}.pushlog-id.${push.pushlog_id}.actions.${ownTaskId}"
                  ]
                },
                "then": [
                  "index.${trustDomain}.v2.${repository.project}.latest.taskgraph.decision",
                  "index.${trustDomain}.v2.${repository.project}.revision.${push.revision}.taskgraph.decision",
                  "index.${trustDomain}.v2.${repository.project}.pushlog-id.${push.pushlog_id}.decision"
                ]
              }
            ]
          },
          "scopes": {
            "$if": "tasks_for == \"hg-push\"",
            "else": {
              "$if": "tasks_for == \"action\"",
              "else": [
                "assume:repo:${repoUrl[8:]}:cron:${cron.job_name}"
              ],
              "then": [
                "assume:repo:${repoUrl[8:]}:action:${action.action_perm}"
              ]
            },
            "then": [
              "assume:repo:${repoUrl[8:]}:branch:default",
              "in-tree:hook-action:project-${trustDomain}/in-tree-action-${repository.level}-*"
            ]
          },
          "taskId": {
            "$if": "tasks_for != \"action\"",
            "then": "${ownTaskId}"
          },
          "created": {
            "$fromNow": ""
          },
          "expires": {
            "$fromNow": "1 year"
          },
          "payload": {
            "env": {
              "$merge": [
                {
                  "REPOSITORIES": {
                    "$json": {
                      "taskgraph": "Taskgraph"
                    }
                  },
                  "HG_STORE_PATH": "/builds/worker/checkouts/hg-store",
                  "TASKGRAPH_HEAD_REF": "${push.revision}",
                  "TASKGRAPH_HEAD_REV": "${push.revision}",
                  "TASKGRAPH_BASE_REPOSITORY": "${repoUrl}",
                  "TASKGRAPH_HEAD_REPOSITORY": "${repoUrl}",
                  "TASKGRAPH_REPOSITORY_TYPE": "hg"
                },
                {
                  "$if": "tasks_for == \"action\"",
                  "then": {
                    "ACTION_INPUT": {
                      "$json": {
                        "$eval": "input"
                      }
                    },
                    "ACTION_TASK_ID": {
                      "$json": {
                        "$eval": "taskId"
                      }
                    },
                    "ACTION_CALLBACK": "${action.cb_name}",
                    "ACTION_TASK_GROUP_ID": "${action.taskGroupId}"
                  }
                }
              ]
            },
            "cache": {
              "${trustDomain}-level-${repository.level}-checkouts-sparse-v2": "/builds/worker/checkouts"
            },
            "image": "mozillareleases/taskgraph:decision-cf37a916268ac8d3fead0a9e4c8e1075328c98d65e0b93a9cfbafe7ea2d4ad83@sha256:ed00d6fa2e8265e165f0f842dba1448fee718b9cc3263cdea4f44cbe0e7b9431",
            "command": [
              "run-task",
              "--taskgraph-checkout=/builds/worker/checkouts/src",
              "--",
              "bash",
              "-cx",
              {
                "in": {
                  "$if": "tasks_for == \"action\"",
                  "else": "cd /builds/worker/checkouts/src \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 pip3 install --user . \u0026\u0026 ~/.local/bin/taskgraph decision --pushlog-id='${push.pushlog_id}' --pushdate='${push.pushdate}' --project='${repository.project}' --owner='${ownerEmail}' --level='${repository.level}' --repository-type=hg --tasks-for='${tasks_for}' --base-repository=\"${repoUrl}\" --head-repository=\"${repoUrl}\" --head-ref=\"${push.revision}\" --head-rev=\"${push.revision}\" ${extraArgs}\n",
                  "then": "cd /builds/worker/checkouts/src \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 pip3 install -r requirements/base.txt \u0026\u0026 pip3 install --user --no-deps . \u0026\u0026 ~/.local/bin/taskgraph action-callback\n"
                },
                "$let": {
                  "extraArgs": {
                    "$if": "tasks_for == \"cron\"",
                    "else": "",
                    "then": "${cron.quoted_args}"
                  }
                }
              }
            ],
            "features": {
              "chainOfTrust": true,
              "taskclusterProxy": true
            },
            "artifacts": {
              "public": {
                "path": "/builds/worker/artifacts",
                "type": "directory",
                "expires": {
                  "$fromNow": "1 year"
                }
              },
              "public/docker-contexts": {
                "path": "/builds/worker/checkouts/src/docker-contexts",
                "type": "directory",
                "expires": {
                  "$fromNow": "7 day"
                }
              }
            },
            "maxRunTime": 1800
          },
          "retries": 5,
          "deadline": {
            "$fromNow": "1 day"
          },
          "metadata": {
            "$merge": [
              {
                "owner": "${ownerEmail}",
                "source": "${repoUrl}/raw-file/${push.revision}/.taskcluster.yml"
              },
              {
                "$if": "tasks_for == \"hg-push\"",
                "else": {
                  "$if": "tasks_for == \"action\"",
                  "else": {
                    "name": "Decision Task for cron job ${cron.job_name}",
                    "description": "Created by a [cron task](https://firefox-ci-tc.services.mozilla.com/tasks/${cron.task_id})"
                  },
                  "then": {
                    "name": "Action: ${action.title}",
                    "description": "${action.description}\n\nAction triggered by clientID `${clientId}`\n"
                  }
                },
                "then": {
                  "name": "Decision Task",
                  "description": "The task that creates all of the other tasks in the task graph"
                }
              }
            ]
          },
          "priority": {
            "$if": "tasks_for == 'cron'",
            "else": {
              "$if": "tasks_for == 'hg-push'",
              "else": "lowest",
              "then": "very-low"
            },
            "then": "low"
          },
          "requires": "all-completed",
          "workerType": "decision",
          "schedulerId": "${trustDomain}-level-${repository.level}",
          "taskGroupId": {
            "$if": "tasks_for == \"action\"",
            "else": "${ownTaskId}",
            "then": "${action.taskGroupId}"
          },
          "dependencies": [],
          "provisionerId": "${trustDomain}-${repository.level}"
        },
        "$let": {
          "repoUrl": {
            "$if": "repository.url[-1] == \"/\"",
            "else": {
              "$eval": "repository.url"
            },
            "then": {
              "$eval": "repository.url[:-1]"
            }
          },
          "ownerEmail": {
            "$if": "\"@\" in push.owner",
            "else": "${push.owner}@noreply.mozilla.org",
            "then": "${push.owner}"
          },
          "trustDomain": "taskgraph"
        }
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:cancel-all",
        "action_perm": "cancel-all",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the `hookPayload`\n        template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
