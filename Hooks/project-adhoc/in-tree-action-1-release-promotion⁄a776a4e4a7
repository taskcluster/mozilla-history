{
  "hookGroupId": "project-adhoc",
  "hookId": "in-tree-action-1-release-promotion/a776a4e4a7",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://hg.mozilla.org/ci/ci-configuration).\n\nAction task release-promotion at level 1, with `.taskcluster.yml` hash a776a4e4a7.\n\nFor project(s) \n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-adhoc/in-tree-action-1-release-promotion/a776a4e4a7",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "in": {
        "in": {
          "$if": "tasks_for in [\"github-push\", \"action\", \"cron\"] || (tasks_for == \"github-pull-request\" \u0026\u0026 pullRequestAction in [\"opened\", \"reopened\", \"synchronize\"])\n",
          "then": {
            "in": {
              "tags": {
                "$if": "tasks_for in [\"github-push\", \"github-pull-request\"]",
                "else": {
                  "$if": "tasks_for == \"action\"",
                  "else": {
                    "$if": "tasks_for == \"cron\"",
                    "then": {
                      "kind": "cron-task"
                    }
                  },
                  "then": {
                    "kind": "action-callback"
                  }
                },
                "then": {
                  "kind": "decision-task"
                }
              },
              "extra": {
                "$merge": [
                  {
                    "$if": "tasks_for == \"action\"",
                    "then": {
                      "action": {
                        "name": "${action.name}",
                        "context": {
                          "input": {
                            "$eval": "input"
                          },
                          "taskId": {
                            "$eval": "taskId"
                          },
                          "taskGroupId": "${action.taskGroupId}"
                        }
                      },
                      "parent": "${action.taskGroupId}"
                    }
                  },
                  {
                    "$if": "tasks_for == \"cron\"",
                    "then": {
                      "cron": {
                        "$json": {
                          "$eval": "cron"
                        }
                      }
                    }
                  },
                  {
                    "tasks_for": "${tasks_for}"
                  }
                ]
              },
              "routes": {
                "$flatten": [
                  "checks",
                  {
                    "$if": "tasks_for == \"github-push\"",
                    "else": [],
                    "then": [
                      "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                    ]
                  }
                ]
              },
              "scopes": {
                "$if": "tasks_for == \"github-push\"",
                "else": {
                  "$if": "tasks_for == \"github-pull-request\"",
                  "else": {
                    "$if": "tasks_for == \"action\"",
                    "else": [
                      "assume:repo:${repoUrl[8:]}:cron:${cron.job_name}"
                    ],
                    "then": [
                      "${action.repo_scope}"
                    ]
                  },
                  "then": [
                    "assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request"
                  ]
                },
                "then": {
                  "in": [
                    "assume:repo:${repoUrl[8:]}:branch:${short_head_branch}"
                  ],
                  "$let": {
                    "short_head_branch": {
                      "$if": "head_branch[:10] == \"refs/tags/\"",
                      "else": {
                        "$if": "head_branch[:11] == \"refs/heads/\"",
                        "else": "${head_branch}",
                        "then": {
                          "$eval": "head_branch[11:]"
                        }
                      },
                      "then": {
                        "$eval": "head_branch[10:]"
                      }
                    }
                  }
                }
              },
              "taskId": {
                "$if": "tasks_for != \"action\"",
                "then": "${ownTaskId}"
              },
              "created": {
                "$fromNow": ""
              },
              "expires": {
                "$fromNow": "1 year 1 second"
              },
              "payload": {
                "env": {
                  "$merge": [
                    {
                      "REPOSITORIES": {
                        "$json": {
                          "adhoc": "Adhoc Manifest"
                        }
                      },
                      "HG_STORE_PATH": "/builds/worker/checkouts/hg-store",
                      "ADHOC_HEAD_REF": "${head_branch}",
                      "ADHOC_HEAD_REV": "${head_sha}",
                      "ADHOC_BASE_REPOSITORY": "${baseRepoUrl}",
                      "ADHOC_HEAD_REPOSITORY": "${repoUrl}",
                      "ADHOC_REPOSITORY_TYPE": "git",
                      "ADHOC_PIP_REQUIREMENTS": "taskcluster/requirements.txt"
                    },
                    {
                      "$if": "tasks_for in [\"github-pull-request\"]",
                      "then": {
                        "ADHOC_PULL_REQUEST_NUMBER": "${event.pull_request.number}"
                      }
                    },
                    {
                      "$if": "tasks_for == \"action\"",
                      "then": {
                        "ACTION_INPUT": {
                          "$json": {
                            "$eval": "input"
                          }
                        },
                        "ACTION_TASK_ID": {
                          "$json": {
                            "$eval": "taskId"
                          }
                        },
                        "ACTION_CALLBACK": "${action.cb_name}",
                        "ACTION_TASK_GROUP_ID": "${action.taskGroupId}"
                      }
                    }
                  ]
                },
                "image": "mozillareleases/taskgraph:decision-d1ddb5593679cec9d7d2cdd8e9b8e2228b14ebe9b844411276cc3cfe37d189aa@sha256:b236321d98367f9cdbbd28c47bad7c0df34884897b75d266185d2e9e569ac0fa",
                "command": [
                  "/usr/local/bin/run-task",
                  "--adhoc-checkout=/builds/worker/checkouts/src",
                  "--task-cwd=/builds/worker/checkouts/src",
                  "--",
                  "bash",
                  "-cx",
                  {
                    "in": {
                      "$if": "tasks_for == \"action\"",
                      "else": "ln -s /builds/worker/artifacts artifacts \u0026\u0026 ~/.local/bin/taskgraph decision --pushlog-id='0' --pushdate='0' --project='${project}' --message=\"\" --owner='${ownerEmail}' --level='${level}' --base-repository=\"$ADHOC_BASE_REPOSITORY\" --head-repository=\"$ADHOC_HEAD_REPOSITORY\" --head-ref=\"$ADHOC_HEAD_REF\" --head-rev=\"$ADHOC_HEAD_REV\" --repository-type=\"$ADHOC_REPOSITORY_TYPE\" --tasks-for='${tasks_for}' ${extraArgs}\n",
                      "then": "cd /builds/worker/checkouts/src \u0026\u0026 ln -s /builds/worker/artifacts artifacts \u0026\u0026 ~/.local/bin/taskgraph action-callback\n"
                    },
                    "$let": {
                      "extraArgs": {
                        "$if": "tasks_for == \"cron\"",
                        "else": "",
                        "then": "${cron.quoted_args}"
                      }
                    }
                  }
                ],
                "features": {
                  "chainOfTrust": true,
                  "taskclusterProxy": true
                },
                "artifacts": {
                  "public": {
                    "path": "/builds/worker/artifacts",
                    "type": "directory",
                    "expires": {
                      "$fromNow": "1 year"
                    }
                  },
                  "public/docker-contexts": {
                    "path": "/builds/worker/checkouts/src/docker-contexts",
                    "type": "directory",
                    "expires": {
                      "$fromNow": "7 day"
                    }
                  }
                },
                "maxRunTime": 1800
              },
              "retries": 5,
              "deadline": {
                "$fromNow": "1 day"
              },
              "metadata": {
                "$merge": [
                  {
                    "owner": "${ownerEmail}",
                    "source": "${repoUrl}/raw/${head_sha}/.taskcluster.yml"
                  },
                  {
                    "$if": "tasks_for in [\"github-push\", \"github-pull-request\"]",
                    "else": {
                      "$if": "tasks_for == \"action\"",
                      "else": {
                        "name": "Decision Task for cron job ${cron.job_name}",
                        "description": "Created by a [cron task](https://tools.taskcluster.net/tasks/${cron.task_id})"
                      },
                      "then": {
                        "name": "Action: ${action.title}",
                        "description": "${action.description}"
                      }
                    },
                    "then": {
                      "name": "Decision Task",
                      "description": "The task that creates all of the other tasks in the task graph"
                    }
                  }
                ]
              },
              "priority": "lowest",
              "requires": "all-completed",
              "workerType": "decision-gcp",
              "schedulerId": "${trustDomain}-level-${level}",
              "taskGroupId": {
                "$if": "tasks_for == \"action\"",
                "else": "${ownTaskId}",
                "then": "${action.taskGroupId}"
              },
              "provisionerId": "adhoc-${level}"
            },
            "$let": {
              "level": {
                "$if": "tasks_for in [\"github-push\", \"cron\", \"action\"] \u0026\u0026 repoUrl == \"https://github.com/mozilla-releng/adhoc-signing\"",
                "else": {
                  "$if": "tasks_for in [\"cron\", \"action\"]",
                  "else": 1,
                  "then": "${repository.level}"
                },
                "then": 3
              }
            }
          }
        },
        "$let": {
          "project": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${repository.project}"
              },
              "then": "${event.pull_request.head.repo.name}"
            },
            "then": "${event.repository.name}"
          },
          "repoUrl": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${repository.url}"
              },
              "then": "${event.pull_request.head.repo.html_url}"
            },
            "then": "${event.repository.html_url}"
          },
          "head_sha": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${push.revision}"
              },
              "then": "${event.pull_request.head.sha}"
            },
            "then": "${event.after}"
          },
          "ownTaskId": {
            "$if": "\"github\" in tasks_for",
            "else": {
              "$if": "tasks_for in [\"cron\", \"action\"]",
              "then": "${ownTaskId}"
            },
            "then": {
              "$eval": "as_slugid(\"decision_task\")"
            }
          },
          "ownerEmail": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${tasks_for}@noreply.mozilla.org"
              },
              "then": "${event.pull_request.user.login}@users.noreply.github.com"
            },
            "then": "${event.pusher.email}"
          },
          "baseRepoUrl": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for in [\"cron\", \"action\"]",
                "then": "${repository.url}"
              },
              "then": "${event.pull_request.base.repo.html_url}"
            },
            "then": "${event.repository.html_url}"
          },
          "head_branch": {
            "$if": "tasks_for == \"github-pull-request\"",
            "else": {
              "$if": "tasks_for == \"github-push\"",
              "else": {
                "$if": "tasks_for == \"cron\"",
                "else": {
                  "$if": "tasks_for == \"action\"",
                  "then": "refs/heads/main"
                },
                "then": "${push.branch}"
              },
              "then": "${event.ref}"
            },
            "then": "${event.pull_request.head.ref}"
          },
          "pullRequestAction": {
            "$if": "tasks_for == \"github-pull-request\"",
            "else": "UNDEFINED",
            "then": "${event.action}"
          }
        }
      },
      "$let": {
        "trustDomain": "adhoc"
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:release-promotion",
        "action_perm": "release-promotion",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              },
              "base_revision": {
                "type": "string",
                "description": "revision before the push occurred"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the\n            `hookPayload` template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
