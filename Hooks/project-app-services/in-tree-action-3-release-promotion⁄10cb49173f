{
  "hookGroupId": "project-app-services",
  "hookId": "in-tree-action-3-release-promotion/10cb49173f",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://github.com/mozilla-releng/fxci-config).\n\nAction task release-promotion at level 3, with `.taskcluster.yml` hash 10cb49173f.\n\nFor (project, branch) combinations:\napplication-services, branch: 'main'\napplication-services, branch: 'release-v134'\n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-app-services/in-tree-action-3-release-promotion/10cb49173f",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "in": {
        "in": {
          "$if": "tasks_for in [\"action\", \"cron\"] || (isPullRequest \u0026\u0026 pullRequestAction in [\"opened\", \"reopened\", \"synchronize\"]) || (isPullRequest \u0026\u0026 issueCommentAction in [\"created\", \"edited\"]) || (tasks_for == \"github-push\" \u0026\u0026 (head_branch == \"refs/heads/main\" || head_branch[:19] == \"refs/heads/release-\"))\n",
          "then": {
            "in": {
              "$mergeDeep": [
                {
                  "$if": "tasks_for != \"action\"",
                  "then": {
                    "taskId": "${ownTaskId}"
                  }
                },
                {
                  "tags": {
                    "$if": "tasks_for in [\"github-push\", \"github-pull-request\", \"github-issue-comment\"]",
                    "else": {
                      "$if": "tasks_for == \"action\"",
                      "else": {
                        "$if": "tasks_for == \"cron\"",
                        "then": {
                          "kind": "cron-task"
                        }
                      },
                      "then": {
                        "kind": "action-callback"
                      }
                    },
                    "then": {
                      "kind": "decision-task"
                    }
                  },
                  "extra": {
                    "$merge": [
                      {
                        "treeherder": {
                          "$merge": [
                            {
                              "machine": {
                                "platform": "gecko-decision"
                              }
                            },
                            {
                              "$if": "tasks_for in [\"github-push\", \"github-pull-request\"]",
                              "else": {
                                "$if": "tasks_for == \"action\"",
                                "then": {
                                  "symbol": "${action.symbol}",
                                  "groupName": "action-callback",
                                  "groupSymbol": "AC"
                                }
                              },
                              "then": {
                                "symbol": "D"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "$if": "tasks_for == \"action\"",
                        "then": {
                          "action": {
                            "name": "${action.name}",
                            "context": {
                              "input": {
                                "$eval": "input"
                              },
                              "taskId": {
                                "$eval": "taskId"
                              },
                              "clientId": {
                                "$eval": "clientId"
                              },
                              "taskGroupId": "${action.taskGroupId}"
                            }
                          },
                          "parent": "${action.taskGroupId}"
                        }
                      },
                      {
                        "$if": "tasks_for == \"cron\"",
                        "then": {
                          "cron": {
                            "$json": {
                              "$eval": "cron"
                            }
                          }
                        }
                      },
                      {
                        "tasks_for": "${tasks_for}"
                      }
                    ]
                  },
                  "routes": {
                    "$flattenDeep": [
                      "checks",
                      {
                        "$if": "!isPullRequest",
                        "then": [
                          {
                            "$if": "tasks_for == \"github-push\"",
                            "then": [
                              "index.project.${project}.v2.branch.${short_head_branch}.latest.taskgraph.decision",
                              "index.project.${project}.v2.branch.${short_head_branch}.revision.${head_sha}.taskgraph.decision",
                              "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                            ]
                          },
                          {
                            "$if": "tasks_for == \"cron\"",
                            "then": [
                              "index.project.${project}.v2.branch.${head_branch}.latest.taskgraph.decision-${cron.job_name}",
                              "index.project.${project}.v2.branch.${head_branch}.revision.${head_sha}.taskgraph.decision-${cron.job_name}",
                              "index.project.${project}.v2.branch.${head_branch}.revision.${head_sha}.taskgraph.cron.${ownTaskId}"
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "scopes": {
                    "$if": "tasks_for == \"github-push\"",
                    "else": {
                      "$if": "isPullRequest",
                      "else": {
                        "$if": "tasks_for == \"action\"",
                        "else": [
                          "assume:repo:${repoUrl[8:]}:cron:${cron.job_name}"
                        ],
                        "then": [
                          "${action.repo_scope}"
                        ]
                      },
                      "then": [
                        "assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request"
                      ]
                    },
                    "then": [
                      "assume:repo:${repoUrl[8:]}:branch:${short_head_branch}"
                    ]
                  },
                  "created": {
                    "$fromNow": ""
                  },
                  "expires": {
                    "$fromNow": "1 year 1 second"
                  },
                  "payload": {
                    "env": {
                      "$merge": [
                        {
                          "REPOSITORIES": {
                            "$json": {
                              "appservices": "Application Services"
                            }
                          },
                          "MOZ_FETCHES_DIR": "/builds/worker/fetches",
                          "ANDROID_SDK_ROOT": "/builds/worker/android-sdk",
                          "TASKCLUSTER_CACHES": "/builds/worker/checkouts",
                          "APPSERVICES_HEAD_REF": "${head_branch}",
                          "APPSERVICES_HEAD_REV": "${head_sha}",
                          "APPSERVICES_BASE_REPOSITORY": "${baseRepoUrl}",
                          "APPSERVICES_HEAD_REPOSITORY": "${repoUrl}",
                          "APPSERVICES_REPOSITORY_TYPE": "git",
                          "APPSERVICES_PIP_REQUIREMENTS": "taskcluster/requirements.txt"
                        },
                        {
                          "$if": "tasks_for in [\"github-pull-request\"]",
                          "then": {
                            "APPSERVICES_PULL_REQUEST_TITLE": "${event.pull_request.title}",
                            "APPSERVICES_PULL_REQUEST_NUMBER": "${event.pull_request.number}"
                          }
                        },
                        {
                          "$if": "tasks_for == \"action\"",
                          "then": {
                            "ACTION_INPUT": {
                              "$json": {
                                "$eval": "input"
                              }
                            },
                            "ACTION_TASK_ID": {
                              "$json": {
                                "$eval": "taskId"
                              }
                            },
                            "ACTION_CALLBACK": "${action.cb_name}",
                            "ACTION_TASK_GROUP_ID": "${action.taskGroupId}"
                          }
                        }
                      ]
                    },
                    "cache": {
                      "${trustDomain}-level-${level}-checkouts-v1": "/builds/worker/checkouts"
                    },
                    "image": "mozillareleases/taskgraph:decision-v11.2.4@sha256:eb53b1ca6b86b1344d61f55aab77b130048c0ae007eef181ec82eec327e91e07",
                    "command": [
                      "/usr/local/bin/run-task",
                      "--appservices-checkout=/builds/worker/checkouts/vcs",
                      "--task-cwd=/builds/worker/checkouts/vcs",
                      "--",
                      "bash",
                      "-cx",
                      {
                        "in": {
                          "$if": "tasks_for == \"action\"",
                          "else": "ln -s /builds/worker/artifacts artifacts \u0026\u0026 taskgraph decision --pushlog-id='0' --pushdate='0' --project='${project}' --message=\"\" --owner='${ownerEmail}' --level='${level}' --base-repository=\"$APPSERVICES_BASE_REPOSITORY\" --head-repository=\"$APPSERVICES_HEAD_REPOSITORY\" --head-ref=\"$APPSERVICES_HEAD_REF\" --head-rev=\"$APPSERVICES_HEAD_REV\" --repository-type=\"$APPSERVICES_REPOSITORY_TYPE\" --tasks-for='${tasks_for}' ${extraArgs}\n",
                          "then": "ln -s /builds/worker/artifacts artifacts \u0026\u0026 taskgraph action-callback\n"
                        },
                        "$let": {
                          "extraArgs": {
                            "$if": "tasks_for == \"cron\"",
                            "else": {
                              "$if": "tasks_for == \"github-issue-comment\" \u0026\u0026 event.taskcluster_comment == \"ci full\"",
                              "else": "",
                              "then": "--target-tasks-method=pr-full"
                            },
                            "then": "${cron.quoted_args}"
                          }
                        }
                      }
                    ],
                    "features": {
                      "chainOfTrust": true,
                      "taskclusterProxy": true
                    },
                    "artifacts": {
                      "public": {
                        "path": "/builds/worker/artifacts",
                        "type": "directory",
                        "expires": {
                          "$fromNow": "1 year"
                        }
                      },
                      "public/docker-contexts": {
                        "path": "/builds/worker/checkouts/vcs/docker-contexts",
                        "type": "directory",
                        "expires": {
                          "$fromNow": "7 day"
                        }
                      }
                    },
                    "maxRunTime": 1800
                  },
                  "retries": 5,
                  "deadline": {
                    "$fromNow": "1 day"
                  },
                  "metadata": {
                    "$merge": [
                      {
                        "owner": "${ownerEmail}",
                        "source": "${repoUrl}/raw/${head_sha}/.taskcluster.yml"
                      },
                      {
                        "$if": "tasks_for in [\"github-push\", \"github-pull-request\", \"github-issue-comment\"]",
                        "else": {
                          "$if": "tasks_for == \"action\"",
                          "else": {
                            "name": "Decision Task for cron job ${cron.job_name}",
                            "description": "Created by a [cron task](https://firefox-ci-tc.services.mozilla.com/tasks/${cron.task_id})"
                          },
                          "then": {
                            "name": "Action: ${action.title}",
                            "description": "${action.description}\n\nAction triggered by clientID `${clientId}`\n"
                          }
                        },
                        "then": {
                          "name": "Decision Task (${tasks_for[7:]})",
                          "description": "The task that creates all of the other tasks in the task graph"
                        }
                      }
                    ]
                  },
                  "priority": "lowest",
                  "requires": "all-completed",
                  "workerType": "decision-gcp",
                  "schedulerId": "${trustDomain}-level-${level}",
                  "taskGroupId": {
                    "$if": "tasks_for == \"action\"",
                    "else": "${ownTaskId}",
                    "then": "${action.taskGroupId}"
                  },
                  "provisionerId": "app-services-${level}"
                }
              ]
            },
            "$let": {
              "level": {
                "$if": "tasks_for in [\"github-push\", \"action\", \"cron\"] \u0026\u0026 repoUrl == \"https://github.com/mozilla/application-services\"",
                "else": "1",
                "then": "3"
              },
              "short_head_branch": {
                "$if": "head_branch[:11] == \"refs/heads/\"",
                "then": {
                  "$eval": "head_branch[11:]"
                }
              }
            }
          }
        },
        "$let": {
          "project": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.repo.name}",
              "tasks_for == \"github-push\"": "${event.repository.name}",
              "tasks_for in [\"cron\", \"action\"]": "${repository.project}"
            }
          },
          "repoUrl": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.repo.html_url}",
              "tasks_for == \"github-push\"": "${event.repository.html_url}",
              "tasks_for in [\"cron\", \"action\"]": "${repository.url}"
            }
          },
          "head_sha": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.sha}",
              "tasks_for == \"github-push\"": "${event.after}",
              "tasks_for in [\"cron\", \"action\"]": "${push.revision}"
            }
          },
          "ownerEmail": {
            "$switch": {
              "isPullRequest": "${event.pull_request.user.login}@users.noreply.github.com",
              "tasks_for == \"github-push\"": "${event.pusher.email}",
              "tasks_for in [\"cron\", \"action\"]": "${tasks_for}@noreply.mozilla.org"
            }
          },
          "baseRepoUrl": {
            "$switch": {
              "isPullRequest": "${event.pull_request.base.repo.html_url}",
              "tasks_for == \"github-push\"": "${event.repository.html_url}",
              "tasks_for in [\"cron\", \"action\"]": "${repository.url}"
            }
          },
          "head_branch": {
            "$switch": {
              "isPullRequest": "${event.pull_request.head.ref}",
              "tasks_for == \"github-push\"": "${event.ref}",
              "tasks_for in [\"cron\", \"action\"]": "${push.branch}"
            }
          }
        }
      },
      "$let": {
        "ownTaskId": {
          "$if": "\"github\" in tasks_for",
          "else": {
            "$if": "tasks_for == \"cron\"",
            "then": "${ownTaskId}"
          },
          "then": {
            "$eval": "as_slugid(\"decision_task\")"
          }
        },
        "trustDomain": "app-services",
        "isPullRequest": {
          "$eval": "tasks_for == \"github-pull-request\" || tasks_for == \"github-issue-comment\""
        },
        "pullRequestAction": {
          "$if": "tasks_for == \"github-pull-request\"",
          "else": "UNDEFINED",
          "then": "${event.action}"
        },
        "issueCommentAction": {
          "$if": "tasks_for == \"github-issue-comment\"",
          "else": "UNDEFINED",
          "then": "${event.action}"
        }
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:release-promotion",
        "action_perm": "release-promotion",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              },
              "base_branch": {
                "type": "string",
                "description": "branch this pull request is based on, if applicable"
              },
              "base_revision": {
                "type": "string",
                "description": "revision before the push occurred"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              },
              "base_url": {
                "type": "string",
                "description": "repository URL to use when checking scopes for this action"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the\n            `hookPayload` template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
