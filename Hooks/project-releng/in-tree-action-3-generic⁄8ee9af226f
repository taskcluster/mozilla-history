{
  "hookGroupId": "project-releng",
  "hookId": "in-tree-action-3-generic/8ee9af226f",
  "metadata": {
    "description": "*DO NOT EDIT* - This resource is configured automatically by [ci-admin](https://github.com/mozilla-releng/fxci-config).\n\nAction task generic at level 3, with `.taskcluster.yml` hash 8ee9af226f.\n\nFor (project, branch) combinations:\nbalrog, branch: 'main'\n\nThis hook is fired in response to actions defined in a\nGecko decision task's `actions.json`.\n",
    "emailOnError": true,
    "name": "project-releng/in-tree-action-3-generic/8ee9af226f",
    "owner": "taskcluster-notifications@mozilla.com"
  },
  "schedule": [],
  "task": {
    "in": {
      "in": {
        "$if": "(tasks_for == \"github-push\" \u0026\u0026 head_branch == \"refs/heads/main\") || (tasks_for == \"github-pull-request\" \u0026\u0026 event.action in [\"opened\", \"reopened\", \"synchronize\"]) || (tasks_for == \"github-release\" \u0026\u0026 releaseAction == \"published\")\n",
        "then": {
          "tags": {
            "kind": "decision-task"
          },
          "extra": {
            "tasks_for": "${tasks_for}"
          },
          "routes": {
            "$flatten": [
              "checks",
              {
                "$if": "tasks_for == \"github-push\"",
                "else": [],
                "then": [
                  "index.${trustDomain}.v2.${project}.revision.${head_sha}.taskgraph.decision"
                ]
              }
            ]
          },
          "scopes": {
            "$if": "tasks_for == \"github-push\"",
            "else": {
              "$if": "tasks_for == \"github-pull-request\"",
              "else": {
                "$if": "tasks_for == \"github-release\"",
                "then": [
                  "assume:repo:${repoUrl[8:]}:release:${releaseAction}"
                ]
              },
              "then": [
                "assume:repo:github.com/${event.pull_request.base.repo.full_name}:pull-request"
              ]
            },
            "then": {
              "in": [
                "assume:repo:${repoUrl[8:]}:branch:${short_head_branch}"
              ],
              "$let": {
                "short_head_branch": {
                  "$if": "head_branch[:10] == \"refs/tags/\"",
                  "else": {
                    "$if": "head_branch[:11] == \"refs/heads/\"",
                    "else": "${head_branch}",
                    "then": {
                      "$eval": "head_branch[11:]"
                    }
                  },
                  "then": {
                    "$eval": "head_branch[10:]"
                  }
                }
              }
            }
          },
          "taskId": "${ownTaskId}",
          "created": {
            "$fromNow": ""
          },
          "expires": {
            "$fromNow": "1 year 1 second"
          },
          "payload": {
            "env": {
              "$merge": [
                {
                  "REPOSITORIES": {
                    "$json": {
                      "balrog": "Balrog"
                    }
                  },
                  "BALROG_HEAD_REF": "${head_branch}",
                  "BALROG_HEAD_REV": "${head_sha}",
                  "BALROG_BASE_REPOSITORY": "${baseRepoUrl}",
                  "BALROG_HEAD_REPOSITORY": "${repoUrl}",
                  "BALROG_REPOSITORY_TYPE": "git",
                  "BALROG_PIP_REQUIREMENTS": "taskcluster/requirements.txt"
                },
                {
                  "$if": "tasks_for in [\"github-pull-request\"]",
                  "then": {
                    "BALROG_PULL_REQUEST_NUMBER": "${event.pull_request.number}"
                  }
                }
              ]
            },
            "image": "mozillareleases/taskgraph:decision-c4ac262880970ca484105929e02dd12f00214d5f2603ab6ce4c0d17de5cd0280@sha256:2dd667994aa13fccdcdcede85c570a5eb4a5247e42875a9e95a135ef774ee469",
            "command": [
              "/usr/local/bin/run-task",
              "--balrog-checkout=/builds/worker/checkouts/src",
              "--task-cwd=/builds/worker/checkouts/src",
              "--",
              "bash",
              "-cx",
              {
                "in": "ln -s /builds/worker/artifacts artifacts \u0026\u0026 ~/.local/bin/taskgraph decision --pushlog-id='0' --pushdate='0' --project='${project}' --message=\"\" --owner='${ownerEmail}' --level='${level}' --base-repository=\"$BALROG_BASE_REPOSITORY\" --head-repository=\"$BALROG_HEAD_REPOSITORY\" --head-ref=\"$BALROG_HEAD_REF\" --head-rev=\"$BALROG_HEAD_REV\" --repository-type=\"$BALROG_REPOSITORY_TYPE\" --tasks-for='${tasks_for}' --target-tasks-method=balrog ${extraArgs}",
                "$let": {
                  "extraArgs": {
                    "$if": "tasks_for == \"github-release\"",
                    "else": "",
                    "then": "--head-tag=\"${event.release.tag_name}\""
                  }
                }
              }
            ],
            "features": {
              "chainOfTrust": true,
              "taskclusterProxy": true
            },
            "artifacts": {
              "public": {
                "path": "/builds/worker/artifacts",
                "type": "directory",
                "expires": {
                  "$fromNow": "1 year"
                }
              },
              "public/docker-contexts": {
                "path": "/builds/worker/checkouts/src/docker-contexts",
                "type": "directory",
                "expires": {
                  "$fromNow": "7 day"
                }
              }
            },
            "maxRunTime": 1800
          },
          "retries": 5,
          "deadline": {
            "$fromNow": "1 day"
          },
          "metadata": {
            "name": "Decision Task",
            "owner": "${ownerEmail}",
            "source": "${repoUrl}/raw/${head_sha}/.taskcluster.yml",
            "description": "The task that creates all of the other tasks in the task graph"
          },
          "priority": "lowest",
          "requires": "all-completed",
          "workerType": "decision-gcp",
          "schedulerId": "${trustDomain}-level-${level}",
          "taskGroupId": "${ownTaskId}",
          "provisionerId": "${trustDomain}-${level}"
        }
      },
      "$let": {
        "level": {
          "$if": "tasks_for in [\"github-push\", \"github-release\"]\n",
          "else": "1",
          "then": "3"
        },
        "project": "balrog",
        "repoUrl": {
          "$if": "tasks_for == \"github-pull-request\"",
          "else": "${event.repository.html_url}",
          "then": "${event.pull_request.head.repo.html_url}"
        },
        "head_sha": {
          "$if": "tasks_for == \"github-push\"",
          "else": {
            "$if": "tasks_for == \"github-pull-request\"",
            "else": "${event.release.tag_name}",
            "then": "${event.pull_request.head.sha}"
          },
          "then": "${event.after}"
        },
        "ownTaskId": {
          "$eval": "as_slugid(\"decision_task\")"
        },
        "ownerEmail": "release+balrog-ci@mozilla.com",
        "baseRepoUrl": {
          "$if": "tasks_for == \"github-pull-request\"",
          "else": "${event.repository.html_url}",
          "then": "${event.pull_request.base.repo.html_url}"
        },
        "head_branch": {
          "$if": "tasks_for == \"github-pull-request\"",
          "else": {
            "$if": "tasks_for == \"github-push\"",
            "else": "${event.release.target_commitish}",
            "then": "${event.ref}"
          },
          "then": "${event.pull_request.head.ref}"
        },
        "trustDomain": "releng",
        "releaseAction": {
          "$if": "tasks_for == \"github-release\"",
          "else": "UNDEFINED",
          "then": "${event.action}"
        }
      }
    },
    "$let": {
      "push": {
        "$eval": "payload.decision.push"
      },
      "input": {
        "$eval": "payload.user.input"
      },
      "action": {
        "name": "${payload.decision.action.name}",
        "title": "${payload.decision.action.title}",
        "symbol": "${payload.decision.action.symbol}",
        "cb_name": "${payload.decision.action.cb_name}",
        "repo_scope": "assume:repo:${payload.decision.repository.url[8:]}:action:generic",
        "action_perm": "generic",
        "description": "${payload.decision.action.description}",
        "taskGroupId": "${payload.decision.action.taskGroupId}"
      },
      "taskId": {
        "$eval": "payload.user.taskId"
      },
      "ownTaskId": {
        "$eval": "taskId"
      },
      "tasks_for": "action",
      "parameters": {
        "$eval": "payload.decision['parameters']"
      },
      "repository": {
        "$eval": "payload.decision.repository"
      },
      "taskGroupId": {
        "$eval": "payload.user.taskGroupId"
      }
    }
  },
  "triggerSchema": {
    "type": "object",
    "required": [
      "decision",
      "user"
    ],
    "properties": {
      "user": {
        "type": "object",
        "required": [
          "input",
          "taskGroupId",
          "taskId"
        ],
        "properties": {
          "input": {
            "anyOf": [
              {
                "type": "object",
                "description": "user input for the task"
              },
              {
                "const": null,
                "description": "null when the action takes no input"
              }
            ]
          },
          "taskId": {
            "anyOf": [
              {
                "type": "string",
                "description": "taskId of the task on which this action was activated"
              },
              {
                "const": null,
                "description": "null when the action is activated for a taskGroup"
              }
            ]
          },
          "taskGroupId": {
            "type": "string",
            "description": "taskGroupId on which this task was activated"
          }
        },
        "description": "Information provided by the user or user interface",
        "additionalProperties": false
      },
      "decision": {
        "type": "object",
        "required": [
          "action",
          "push",
          "repository"
        ],
        "properties": {
          "push": {
            "type": "object",
            "required": [
              "owner",
              "pushlog_id",
              "revision"
            ],
            "properties": {
              "owner": {
                "type": "string",
                "description": "user who made the original push"
              },
              "branch": {
                "type": "string",
                "description": "branch revision of original push is from"
              },
              "revision": {
                "type": "string",
                "description": "revision of the original push"
              },
              "pushlog_id": {
                "type": "string",
                "description": "Mercurial pushlog ID of the original push"
              },
              "base_branch": {
                "type": "string",
                "description": "branch this pull request is based on, if applicable"
              },
              "base_revision": {
                "type": "string",
                "description": "revision before the push occurred"
              }
            },
            "description": "Information about the push that created the decision task",
            "additionalProperties": false
          },
          "action": {
            "type": "object",
            "required": [
              "cb_name",
              "description",
              "name",
              "symbol",
              "taskGroupId",
              "title"
            ],
            "properties": {
              "name": {
                "type": "string",
                "description": "action name"
              },
              "title": {
                "type": "string",
                "description": "action title"
              },
              "symbol": {
                "type": "string",
                "description": "treeherder symbol"
              },
              "cb_name": {
                "type": "string",
                "description": "name of the in-tree callback function"
              },
              "description": {
                "type": "string",
                "description": "action description"
              },
              "taskGroupId": {
                "type": "string",
                "description": "taskGroupId of the decision task"
              }
            },
            "description": "Information about the action to perform",
            "additionalProperties": false
          },
          "parameters": {
            "type": "object",
            "description": "decision task parameters",
            "additionalProperties": true
          },
          "repository": {
            "type": "object",
            "required": [
              "level",
              "project",
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "pattern": "[^/]$",
                "description": "repository URL (without trailing slash)"
              },
              "level": {
                "type": "string",
                "description": "repository SCM level"
              },
              "project": {
                "type": "string",
                "description": "repository project name (also known as \"alias\")"
              },
              "base_url": {
                "type": "string",
                "description": "repository URL to use when checking scopes for this action"
              }
            },
            "description": "Information about the repository where the push occurred",
            "additionalProperties": false
          }
        },
        "description": "Information provided by the decision task; this is usually baked into\n            `actions.json`, although any value could be supplied in a direct call to\n            `hooks.triggerHook`.",
        "additionalProperties": false
      }
    },
    "description": "Information required to trigger this hook.  This is provided by the\n            `hookPayload` template in the `actions.json` file generated in-tree.",
    "additionalProperties": false
  }
}
